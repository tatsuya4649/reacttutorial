
flux
---

fluxとはユーザインターフェースを構築するためのアプリケーションアーキテクチャ。

フロントエンドフレームワークではなく、設計パターン。


例えば、アプリを開いているときに新しくデータの更新がありユーザー側で管理しなければいけないケース。

  ex
  ---

  ユーザー <--------------- サーバー
  		コメント

  ユーザーはコメントの重複なく、到着したコメント数を正しく管理しなければならない。

Redux
---

そうした状態の管理やデータの保管を行うライブラリがRedux。

ReactのsetStateを使いコンポーネントのstateを更新するだけでは、管理が難しくなってくるような複雑なアプリの場合(PUSH通知など)、ページ内のコンポーネントの整合性を保つためにコードが複雑になってしまう。

What is flux
---

それぞれの役割が疎結合なのに注目。


                  +-------------+
       +----------|  Actions    |<---------+
       |          +-------------+          |
       |                                   |
       |                                   |
       |               			   |
       |          		           |
       |                   		   |
       |                                   |
       ▾                                   |
+-------------+   +-------------+   +------+------+
| Dispatcher  |-->|  Stores     |-->| View        |
+-------------+   +-------------+   +-------------+

https://github.com/facebook/flux

Actions: ボタンを押したり、コメントしたりデータ更新があったときに発動される。

Dispatcher: 接続先(複数の場合もあり)にアクセスして、データを送信して処理を行う役割。一般的には、1つのアプリに1つのDicpatcher。

Stores: データを格納する役割。

View: Storesのデータを検知して、レンダリングして結果を反映させる役割。

ViewはActionsやDispatcherがどんな処理を行っているのかに関わることがなく、反対にActionsやDispatcherはViewがどんな処理を行っているのかに関わることがない。


flux and asynchronous
---

fluxと非同期処理(非同期通信)を使ったアプリケーション開発。

fluxの構成要素、Actions(非同期処理のトリガ),Dispatcher(非同期通信処理)を実装することで簡単にサーバーサイドとの通信もfluxの設計を保ったまま実装することができる。
