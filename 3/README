
State
---

Reactコンポーネントの中にある状態を表す概念でクラスからthis.stateでアクセスすることができる。(ただし、直接Reactコンポーネントがthis.stateを宣言しているわけではない。)

setStateメソッドを使用することにより、コンポーネントのstate(状態の変更)をReactに伝えることができる。

すると、Reactはそのコンポーネントを再レンダリングの命令キューにキューイングされ自動的にコンポーネントの再レンダリングが実行される仕組み。

ちなみに、this.stateは同じでもsetStateが呼びだされただけキューイングされるので、パラメータの値に関係なく再描画される。

仮想DOM
---

ReactはこのStateの仕組みを使用し、Javascriptの処理の中でもコスト(処理がたくさんあり時間がかかる)の高い描画を必要な部分だけに限定することでUI部品(コンポーネント)がたくさんあるWebアプリケーションでも、効率的にレンダリング処理を実行することができる => 仮想DOM


props
---

ReactのJSXではコンポーネントごとにパラメータを渡して利用することができる。 => 同じコンポーネント種類でもコンポーネントごとに違う値を渡すことができる。

	ex
	----
	return (
	       <div>
		 <Header title={"hello my site"} />
		 <Footer />
	       </div>
	);

	Header class:
	console.log(this.props) ### {title:"hello my site"}

propsは複数渡すことも可能。

ちなみにpropsは”小道具”という意味。

Header -> Title -> String

といった形で親要素から順にパラメータを伝搬させることができる。

State && props
---

State => コンポーネントごとの現在の状態(パラメータ)を保持しておく。

props => コンポーネントごとに渡されるパラメータ。

