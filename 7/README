
Redux
---

ReduxはJavascriptアプリケーション用の状態管理コンテナ。

SPAが登場してからフロントエンド側での状態管理は重要性をましており、かつ状態管理を実現するためにフロントエンド側のコードは複雑になってメンテナンスがしくくく、テストしにくいという...。

そこでReduxが開発され、安定した動作の実現とテスト、SPAに対する機能の追加を簡単にし、バグの発見もしやすい。

状態管理コンテナなのでReactと同じライブラリではないので注意。


flux and Redux
---

関係性としては、fluxな設計思想を実現するために使われるのがReduxといった感じ。

One Store
---

1つのStoreのみ存在すること。(１箇所ですべてのコンポーネントの状態を管理している。)

コメントやお気に入りなどのStore要素を1の巨大なオブジェクトに入れて管理するのが特徴。

また、イミュータブル(変更不可)であり、ユーザーコードによって直接操作されることはないため、常に新しく生成されたデータを置き換えて更新していく。

State
---

ReduxではJavascriptオブジェクト内に保管する。

	What is State
	----

	アプリケーションはさまざまな状態を管理しなければいけない。

	ユーザーの現在のURL,取得しているデータ、選択中のデータなど...

	簡単なアプリケーションでは、変数や配列、辞書だけで保持している。


View
---

状態をレンダリングする。

Actions
---

状態変化のトリガー。(ボタンを押すなど)

Store
---

状態の保管を担当。Storeに対してActionsデータを送信するときは、dispatchを行う。

自動で状態変化の計算も行って更新する状態を決定する。

Redux
---

Reduxを使うことでstateを取得して管理するためのコードをReact(UI)から切り離すことができる。疎な結合を実現可能。(つまり、UIと状態管理を完全に分けて考えることができるのでUI部分にReact以外のライブラリを使うこともできる。)


Immutable Function
---

イミュータブルを実現するための関数。

Javascriptは配列、辞書が参照型なので、他のインスタンスに自分の値を変更されてしまう恐れがある。それらの型せイミュータブルを実現するための関数は下の関数。

Object.assign(),Array.prototype.concat(),Array.prototype.filter(),Array.prototype.map(),Array.prototype.reduce()


flow of Redux 
---

1. reducerの作成

2. storeの作成

3. actionのdispatch

4. reducerがstoreに対して処理


middleware
---

reducerの処理に入る前に処理を行う。
